//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;

namespace phukienipadx.Dal.Repository
{
    /// <summary>
    /// Repository for table manufacturer 
    /// </summary>
    public partial class manufacturerRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;
        public IUnitOfWork UOW { get { return unitOfWork; } }

        #endregion

        #region Ctor

        // Default contructor that creates an instance of unit of work
        public manufacturerRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public manufacturerRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion

        #region Basic C.R.U.D. operations

        // Query manufacturer
        public IQueryable<manufacturer> Querymanufacturer(Expression<Func<manufacturer, bool>> expression)
        {
        	return unitOfWork.GetQuery<manufacturer>(expression);
        }
        // List of all manufacturer 
        public IList<manufacturer> GetAllmanufacturer()
        {
            return unitOfWork.GetAll<manufacturer>();
        }

        // Find all manufacturer 
        public IList<manufacturer> Findmanufacturer(Expression<Func<manufacturer, bool>> expression)
        {
            return unitOfWork.Find<manufacturer>(expression).ToList();
        }

        // Get single manufacturer 
        public manufacturer GetSinglemanufacturer(Func<manufacturer, bool> expression)
        {
            return unitOfWork.GetSingle<manufacturer>(expression);
        }

        // Add a new manufacturer 
        public manufacturer Addmanufacturer(manufacturer _manufacturer)
        {
            unitOfWork.Add<manufacturer>(_manufacturer);
            return _manufacturer;
        }

        // Delete a existed manufacturer 
        public void Deletemanufacturer(manufacturer _manufacturer)
        {
            unitOfWork.Delete<manufacturer>(_manufacturer);
        }

        // Delete batch a existed manufacturer 
        public void DeleteBatchmanufacturer(IEnumerable<manufacturer> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<manufacturer>(item);
        	}
        }

        // Update a existed manufacturer 
        public manufacturer Updatemanufacturer(manufacturer _manufacturer)
        {
            unitOfWork.Update<manufacturer>(_manufacturer);
            return _manufacturer;
        }

        // Refresh an existed manufacturer 
        public manufacturer Refeshmanufacturer(manufacturer _manufacturer)
        {
            unitOfWork.Refresh<manufacturer>(_manufacturer);
            return _manufacturer;
        }

        // Refresh Allmanufacturer 
        public void RefreshListmanufacturer(IEnumerable<manufacturer> list)
        {
            unitOfWork.RefreshList<manufacturer>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion

        #endregion

        #region all the custom code


        #endregion
    }
}
