//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;

namespace phukienipadx.Dal.Repository
{
    /// <summary>
    /// Repository for table manufacturers_info 
    /// </summary>
    public partial class manufacturers_infoRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion

        #region Ctor

        // Default contructor that creates an instance of unit of work
        public manufacturers_infoRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public manufacturers_infoRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion

        #region Basic C.R.U.D. operations

        // List of all manufacturers_info 
        public IList<manufacturers_info> GetAllmanufacturers_info()
        {
            return unitOfWork.GetAll<manufacturers_info>();
        }

        // Find all manufacturers_info 
        public IList<manufacturers_info> Findmanufacturers_info(Expression<Func<manufacturers_info, bool>> expression)
        {
            return unitOfWork.Find<manufacturers_info>(expression).ToList();
        }

        // Get single manufacturers_info 
        public manufacturers_info GetSinglemanufacturers_info(Func<manufacturers_info, bool> expression)
        {
            return unitOfWork.GetSingle<manufacturers_info>(expression);
        }

        // Add a new manufacturers_info 
        public manufacturers_info Addmanufacturers_info(manufacturers_info _manufacturers_info)
        {
            unitOfWork.Add<manufacturers_info>(_manufacturers_info);
            return _manufacturers_info;
        }

        // Delete a existed manufacturers_info 
        public void Deletemanufacturers_info(manufacturers_info _manufacturers_info)
        {
            unitOfWork.Delete<manufacturers_info>(_manufacturers_info);
        }

        // Delete batch a existed manufacturers_info 
        public void DeleteBatchmanufacturers_info(IEnumerable<manufacturers_info> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<manufacturers_info>(item);
        	}
        }

        // Update a existed manufacturers_info 
        public manufacturers_info Updatemanufacturers_info(manufacturers_info _manufacturers_info)
        {
            unitOfWork.Update<manufacturers_info>(_manufacturers_info);
            return _manufacturers_info;
        }

        // Refresh an existed manufacturers_info 
        public manufacturers_info Refeshmanufacturers_info(manufacturers_info _manufacturers_info)
        {
            unitOfWork.Refresh<manufacturers_info>(_manufacturers_info);
            return _manufacturers_info;
        }

        // Refresh Allmanufacturers_info 
        public void RefreshListmanufacturers_info(IEnumerable<manufacturers_info> list)
        {
            unitOfWork.RefreshList<manufacturers_info>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion

        #endregion

        #region all the custom code


        #endregion
    }
}
