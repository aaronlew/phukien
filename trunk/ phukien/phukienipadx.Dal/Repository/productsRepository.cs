//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;

namespace phukienipadx.Dal.Repository
{
    /// <summary>
    /// Repository for table products 
    /// </summary>
    public partial class productsRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion

        #region Ctor

        // Default contructor that creates an instance of unit of work
        public productsRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public productsRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion

        #region Basic C.R.U.D. operations

        // List of all products 
        public IList<products> GetAllproducts()
        {
            return unitOfWork.GetAll<products>();
        }

        // Find all products 
        public IList<products> Findproducts(Expression<Func<products, bool>> expression)
        {
            return unitOfWork.Find<products>(expression).ToList();
        }

        // Get single products 
        public products GetSingleproducts(Func<products, bool> expression)
        {
            return unitOfWork.GetSingle<products>(expression);
        }

        // Add a new products 
        public products Addproducts(products _products)
        {
            unitOfWork.Add<products>(_products);
            return _products;
        }

        // Delete a existed products 
        public void Deleteproducts(products _products)
        {
            unitOfWork.Delete<products>(_products);
        }

        // Delete batch a existed products 
        public void DeleteBatchproducts(IEnumerable<products> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<products>(item);
        	}
        }

        // Update a existed products 
        public products Updateproducts(products _products)
        {
            unitOfWork.Update<products>(_products);
            return _products;
        }

        // Refresh an existed products 
        public products Refeshproducts(products _products)
        {
            unitOfWork.Refresh<products>(_products);
            return _products;
        }

        // Refresh Allproducts 
        public void RefreshListproducts(IEnumerable<products> list)
        {
            unitOfWork.RefreshList<products>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion

        #endregion

        #region all the custom code


        #endregion
    }
}
