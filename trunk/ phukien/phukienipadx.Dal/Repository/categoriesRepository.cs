//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;

namespace phukienipadx.Dal.Repository
{
    /// <summary>
    /// Repository for table categories 
    /// </summary>
    public partial class categoriesRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion

        #region Ctor

        // Default contructor that creates an instance of unit of work
        public categoriesRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public categoriesRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion

        #region Basic C.R.U.D. operations

        // List of all categories 
        public IList<categories> GetAllcategories()
        {
            return unitOfWork.GetAll<categories>();
        }

        // Find all categories 
        public IList<categories> Findcategories(Expression<Func<categories, bool>> expression)
        {
            return unitOfWork.Find<categories>(expression).ToList();
        }

        // Get single categories 
        public categories GetSinglecategories(Func<categories, bool> expression)
        {
            return unitOfWork.GetSingle<categories>(expression);
        }

        // Add a new categories 
        public categories Addcategories(categories _categories)
        {
            unitOfWork.Add<categories>(_categories);
            return _categories;
        }

        // Delete a existed categories 
        public void Deletecategories(categories _categories)
        {
            unitOfWork.Delete<categories>(_categories);
        }

        // Delete batch a existed categories 
        public void DeleteBatchcategories(IEnumerable<categories> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<categories>(item);
        	}
        }

        // Update a existed categories 
        public categories Updatecategories(categories _categories)
        {
            unitOfWork.Update<categories>(_categories);
            return _categories;
        }

        // Refresh an existed categories 
        public categories Refeshcategories(categories _categories)
        {
            unitOfWork.Refresh<categories>(_categories);
            return _categories;
        }

        // Refresh Allcategories 
        public void RefreshListcategories(IEnumerable<categories> list)
        {
            unitOfWork.RefreshList<categories>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion

        #endregion

        #region all the custom code


        #endregion
    }
}
