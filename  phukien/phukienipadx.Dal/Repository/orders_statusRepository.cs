//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;

namespace phukienipadx.Dal.Repository
{
    /// <summary>
    /// Repository for table orders_status 
    /// </summary>
    public partial class orders_statusRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;
        public IUnitOfWork UOW { get { return unitOfWork; } }

        #endregion

        #region Ctor

        // Default contructor that creates an instance of unit of work
        public orders_statusRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public orders_statusRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion

        #region Basic C.R.U.D. operations

        // Query orders_status
        public IQueryable<orders_status> Queryorders_status(Expression<Func<orders_status, bool>> expression)
        {
        	return unitOfWork.GetQuery<orders_status>(expression);
        }
        // List of all orders_status 
        public IList<orders_status> GetAllorders_status()
        {
            return unitOfWork.GetAll<orders_status>();
        }

        // Find all orders_status 
        public IList<orders_status> Findorders_status(Expression<Func<orders_status, bool>> expression)
        {
            return unitOfWork.Find<orders_status>(expression).ToList();
        }

        // Get single orders_status 
        public orders_status GetSingleorders_status(Func<orders_status, bool> expression)
        {
            return unitOfWork.GetSingle<orders_status>(expression);
        }

        // Add a new orders_status 
        public orders_status Addorders_status(orders_status _orders_status)
        {
            unitOfWork.Add<orders_status>(_orders_status);
            return _orders_status;
        }

        // Delete a existed orders_status 
        public void Deleteorders_status(orders_status _orders_status)
        {
            unitOfWork.Delete<orders_status>(_orders_status);
        }

        // Delete batch a existed orders_status 
        public void DeleteBatchorders_status(IEnumerable<orders_status> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<orders_status>(item);
        	}
        }

        // Update a existed orders_status 
        public orders_status Updateorders_status(orders_status _orders_status)
        {
            unitOfWork.Update<orders_status>(_orders_status);
            return _orders_status;
        }

        // Refresh an existed orders_status 
        public orders_status Refeshorders_status(orders_status _orders_status)
        {
            unitOfWork.Refresh<orders_status>(_orders_status);
            return _orders_status;
        }

        // Refresh Allorders_status 
        public void RefreshListorders_status(IEnumerable<orders_status> list)
        {
            unitOfWork.RefreshList<orders_status>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion

        #endregion

        #region all the custom code


        #endregion
    }
}
