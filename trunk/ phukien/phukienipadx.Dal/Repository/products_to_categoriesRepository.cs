//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;

namespace phukienipadx.Dal.Repository
{
    /// <summary>
    /// Repository for table products_to_categories 
    /// </summary>
    public partial class products_to_categoriesRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;
        public IUnitOfWork UOW { get { return unitOfWork; } }

        #endregion

        #region Ctor

        // Default contructor that creates an instance of unit of work
        public products_to_categoriesRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public products_to_categoriesRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion

        #region Basic C.R.U.D. operations

        // Query products_to_categories
        public IQueryable<products_to_categories> Queryproducts_to_categories(Expression<Func<products_to_categories, bool>> expression)
        {
        	return unitOfWork.GetQuery<products_to_categories>(expression);
        }
        // List of all products_to_categories 
        public IList<products_to_categories> GetAllproducts_to_categories()
        {
            return unitOfWork.GetAll<products_to_categories>();
        }

        // Find all products_to_categories 
        public IList<products_to_categories> Findproducts_to_categories(Expression<Func<products_to_categories, bool>> expression)
        {
            return unitOfWork.Find<products_to_categories>(expression).ToList();
        }

        // Get single products_to_categories 
        public products_to_categories GetSingleproducts_to_categories(Func<products_to_categories, bool> expression)
        {
            return unitOfWork.GetSingle<products_to_categories>(expression);
        }

        // Add a new products_to_categories 
        public products_to_categories Addproducts_to_categories(products_to_categories _products_to_categories)
        {
            unitOfWork.Add<products_to_categories>(_products_to_categories);
            return _products_to_categories;
        }

        // Delete a existed products_to_categories 
        public void Deleteproducts_to_categories(products_to_categories _products_to_categories)
        {
            unitOfWork.Delete<products_to_categories>(_products_to_categories);
        }

        // Delete batch a existed products_to_categories 
        public void DeleteBatchproducts_to_categories(IEnumerable<products_to_categories> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<products_to_categories>(item);
        	}
        }

        // Update a existed products_to_categories 
        public products_to_categories Updateproducts_to_categories(products_to_categories _products_to_categories)
        {
            unitOfWork.Update<products_to_categories>(_products_to_categories);
            return _products_to_categories;
        }

        // Refresh an existed products_to_categories 
        public products_to_categories Refeshproducts_to_categories(products_to_categories _products_to_categories)
        {
            unitOfWork.Refresh<products_to_categories>(_products_to_categories);
            return _products_to_categories;
        }

        // Refresh Allproducts_to_categories 
        public void RefreshListproducts_to_categories(IEnumerable<products_to_categories> list)
        {
            unitOfWork.RefreshList<products_to_categories>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion

        #endregion

        #region all the custom code

        public void DeleteAllCategories(Expression<Func<products_to_categories, bool>> expression)
        {
            try
            {
                var categories = unitOfWork.Find<products_to_categories>(expression).ToList();
                DeleteBatchproducts_to_categories(categories);
            }
            catch
            {
                throw;
            }
        }

        #endregion
    }
}
